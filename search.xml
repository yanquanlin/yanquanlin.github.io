<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[acm模板]]></title>
    <url>%2F2019%2F01%2F27%2Facm%E6%A8%A1%E6%9D%BF%2F</url>
    <content type="text"><![CDATA[其他位运算123456789101112131415161718#include&lt;iostream&gt;using namespace std;int main()&#123; int n=15,m=8;//1111，1000 unsigned int x=8,y=7; cout&lt;&lt;__builtin_popcount(n)&lt;&lt;endl;//判断n中有几个1 cout&lt;&lt;__builtin_parity(n)&lt;&lt;endl;//判断n中1的个数的奇偶性,奇数输出1，偶数输出0 cout&lt;&lt;__builtin_parity(m)&lt;&lt;endl; cout&lt;&lt;__builtin_ffs(n)&lt;&lt;endl;//判断n的二进制末尾最后一个1的位置 cout&lt;&lt;__builtin_ffs(m)&lt;&lt;endl; cout&lt;&lt;__builtin_ctzll(n)&lt;&lt;endl;//判断n的二进制末尾后面0的个数，当n为0时，和n的类型有关 cout&lt;&lt;__builtin_ctz(m)&lt;&lt;endl; cout&lt;&lt;__builtin_clz(x)&lt;&lt;endl;//前导0的个数(为32位） cout&lt;&lt;__builtin_clz(y)&lt;&lt;endl; return 0; &#125; &lt;!--more--&gt; 数据结构线段树线段树的单点修改123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263const int maxn=1e6+5;int a[maxn]; //存每个数的值struct node&#123; int sum; int ll,rr;&#125;tree[maxn*4];void Pushup(int id) //区间合并&#123; tree[id].sum=tree[id*2].sum+tree[id*2+1].sum;&#125;void Pushdown() //区间下放，进行区间修改的时候用到&#123;&#125;void Build(int id,int ll,int rr) //建树&#123; tree[id].ll=ll; tree[id].rr=rr; if(ll==rr) &#123; tree[id].sum=a[ll]; return; &#125; int mid=(ll+rr)/2; //mid=ll+rr&gt;&gt;1; Build(id*2,ll,mid); Build(id*2+1,mid+1,rr); //Build(id&lt;&lt;1,ll,mid); //Build(id&lt;&lt;1|1,mid+1,rr); Pushup(id);&#125;void Update(int id,int x,int y) //修改&#123; if(tree[id].ll==tree[id].rr) &#123; tree[id].sum=y; return; &#125; int mid=(tree[id].ll+tree[id].rr)/2; if(x&lt;=mid) Update(id*2,x,y); else Update(id*2+1,x,y); Pushup(id);&#125;int Query(int id,int x,int y) //查询&#123; if(x&lt;=tree[id].ll&amp;&amp;tree[id].rr&lt;=y)//到头的情况 return tree[id].sum; int mid=(tree[id].ll+tree[id].rr)/2; if(y&lt;=mid) //只需要访问左边 return Query(id*2,x,y); else if(x&gt;=mid+1) return Query(id*2+1,x,y); else return Query(id*2,x,y)+Query(id*2+1,x,y);&#125; 线段树的区间修改123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475const int maxn=1e6+5;long long int a[maxn];long long int lazy[maxn*4]; //存每个数的值struct node&#123; long long int sum; long long int ll,rr;&#125;tree[maxn*4];void Pushup(int id) //区间合并&#123; tree[id].sum=tree[id*2].sum+tree[id*2+1].sum;&#125;void Pushdown(int id) //区间下放，进行区间修改的时候用到&#123; if(lazy[id]) &#123; tree[id*2].sum+=lazy[id]*(tree[id*2].rr-tree[id*2].ll+1); tree[id*2+1].sum+=lazy[id]*(tree[id*2+1].rr-tree[id*2+1].ll+1); lazy[id*2]+=lazy[id]; lazy[id*2+1]+=lazy[id]; lazy[id]=0; &#125;&#125;void Build(int id,int ll,int rr) //建树&#123; lazy[id]=0; tree[id].ll=ll; tree[id].rr=rr; if(ll==rr) &#123; tree[id].sum=a[ll]; return; &#125; int mid=(ll+rr)/2; //mid=ll+rr&gt;&gt;1; //Build(ltree); //Build(rtree); Build(id&lt;&lt;1,ll,mid); Build(id&lt;&lt;1|1,mid+1,rr); Pushup(id);&#125;void Update(int id,int x,int y,int z) //修改&#123; if(x&lt;=tree[id].ll&amp;&amp;tree[id].rr&lt;=y) &#123; tree[id].sum+=z*(tree[id].rr-tree[id].ll+1); lazy[id]+=z; return; &#125; int mid=(tree[id].ll+tree[id].rr)/2; Pushdown(id); if(y&lt;=mid) Update(id*2,x,y,z); else if(x&gt;=mid+1) Update(id*2+1,x,y,z); else &#123; Update(id*2,x,y,z); Update(id*2+1,x,y,z); &#125; Pushup(id);&#125;long long int Query(int id,int x,int y) //查询&#123; if(x&lt;=tree[id].ll&amp;&amp;tree[id].rr&lt;=y)//到头的情况 return tree[id].sum; int mid=(tree[id].ll+tree[id].rr)/2; Pushdown(id); if(y&lt;=mid) //只需要访问左边 return Query(id*2,x,y); else if(x&gt;=mid+1) return Query(id*2+1,x,y); else return Query(id*2,x,y)+Query(id*2+1,x,y);&#125; 主席树12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const int N = 100000 + 5;int a[N], b[N], rt[N * 20], ls[N * 20], rs[N * 20], sum[N * 20];int n, k, tot, sz, ql, qr, x, q, T;void Build(int&amp; o, int l, int r)&#123; o = ++ tot; sum[o] = 0; if(l == r) return; int m = (l + r) &gt;&gt; 1; Build(ls[o], l, m); Build(rs[o], m + 1, r);&#125;void update(int&amp; o, int l, int r, int last, int p)&#123; o = ++ tot; ls[o] = ls[last]; rs[o] = rs[last]; sum[o] = sum[last] + 1; if(l == r) return; int m = (l + r) &gt;&gt; 1; if(p &lt;= m) update(ls[o], l, m, ls[last], p); else update(rs[o], m + 1, r, rs[last], p);&#125;int query(int ss, int tt, int l, int r, int k)&#123; if(l == r) return l; int m = (l + r) &gt;&gt; 1; int cnt = sum[ls[tt]] - sum[ls[ss]]; if(k &lt;= cnt) return query(ls[ss], ls[tt], l, m, k); else return query(rs[ss], rs[tt], m + 1, r, k - cnt);&#125;void work()&#123; scanf(&quot;%d%d%d&quot;, &amp;ql, &amp;qr, &amp;x); int ans = query(rt[ql - 1], rt[qr], 1, sz, x); printf(&quot;%d\n&quot;, b[ans]);&#125;int main()&#123; scanf(&quot;%d&quot;, &amp;T); while(T--)&#123; scanf(&quot;%d%d&quot;, &amp;n, &amp;q); for(int i = 1; i &lt;= n; i ++) scanf(&quot;%d&quot;, a + i), b[i] = a[i]; sort(b + 1, b + n + 1); sz = unique(b + 1, b + n + 1) - (b + 1); tot = 0; Build(rt[0],1, sz); //for(int i = 0; i &lt;= 4 * n; i ++)printf(&quot;%d,rt = %d,ls = %d, rs = %d, sum = %d\n&quot;, i, rt[i], ls[i], rs[i], sum[i]); for(int i = 1; i &lt;= n; i ++)a[i] = lower_bound(b + 1, b + sz + 1, a[i]) - b; for(int i = 1; i &lt;= n; i ++)update(rt[i], 1, sz, rt[i - 1], a[i]); //for(int i = 0; i &lt;= 5 * n; i ++)printf(&quot;%d,rt = %d,ls = %d, rs = %d, sum = %d\n&quot;, i, rt[i], ls[i], rs[i], sum[i]); while(q --)work(); &#125; return 0;&#125; 树状数组123456789101112131415161718192021222324252627282930313233343536373839#include&lt;stdio.h&gt;int tree[1000000],n;int lowbit(int x)&#123; return x&amp;(-x);&#125;int Query(int x)//查询x项的前缀和 ； &#123; int res=0; while(x) &#123; res+=tree[x]; x-=lowbit(x); &#125; return res;&#125;void Add(int x,int v)//在x位加v； &#123; while(x&lt;=n) &#123; tree[x]+=v; x+=lowbit(x); &#125;&#125;int main()&#123; int a[100000],x; scanf(&quot;%d %d&quot;,&amp;n,&amp;x); for(int i=1;i&lt;=n;i++) &#123; scanf(&quot;%d&quot;,&amp;a[i]); &#125; for(int i=1;i&lt;=n;i++) &#123; Add(i,a[i]);//树状数组的预处理，初始化 &#125; printf(&quot;%d\n&quot;,Query(x)); return 0;&#125; st表1234567891011121314void Init()&#123; for(int i = 0; i &lt; n; i++) d[i][0] = a[i]; for(int j = 1; (1&lt;&lt;j) &lt;= n; j++) for(int i = 0; i+(1&lt;&lt;j) &lt;= n; i++) d[i][j] = min(d[i][j-1], d[i+(1&lt;&lt;(j-1))][j-1]);&#125;int RMQ(int l, int r)&#123; int k = 0; while((1&lt;&lt;k) &lt;= r-l+1)k++; k--; return min(d[l][k], d[r-(1&lt;&lt;k)+1][k]);&#125; 字符串kmp12345678910111213141516171819202122232425262728#include&lt;cstring&gt;#include&lt;cstdio&gt;int n,m,next[100001];char a[100001],b[100001];void Getnext()&#123; next[0]=-1; for(int i=1,j=0;i&lt;m;i++,j++) &#123; while(j!=-1&amp;&amp;b[i]!=b[j]) j=next[j]; next[i+1]=j+1; &#125;&#125;void KMP()&#123; for(int i=0,j=0;i&lt;n;i++,j++) &#123; while(j!=-1&amp;&amp;a[i]!=b[j]) j=next[j]; if(j==m-1) printf(&quot;%d\n&quot;,i-j+1); &#125;&#125;int main()&#123; scanf(&quot;%s%s&quot;,a,b); //a-&gt;long b-&gt;short n=strlen(a);m=strlen(b); Getnext(); KMP();&#125; ac自动机12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &lt;cstring&gt;#include &lt;cstdio&gt;#include &lt;queue&gt;const int N=500005;int T,n,tot,end[N],fail[N],son[N][26];char s[N*2];std::queue&lt;int&gt; Q;void init(int x)&#123; end[x]=0; for(int i=0;i&lt;26;i++) son[x][i]=0;&#125;void Add()&#123; scanf(&quot;%s&quot;,s); int len=strlen(s),pre=0; for(int i=0;i&lt;len;i++) &#123; if(!son[pre][s[i]-&apos;a&apos;]) init(son[pre][s[i]-&apos;a&apos;]=++tot); pre=son[pre][s[i]-&apos;a&apos;]; &#125; end[pre]++;&#125;void Build()&#123; Q.push(0); while(!Q.empty()) &#123; int x=Q.front();Q.pop(); for(int i=0;i&lt;26;i++) &#123; if(son[x][i]) &#123; Q.push(son[x][i]); fail[son[x][i]]=x?son[fail[x]][i]:0; &#125; else son[x][i]=x?son[fail[x]][i]:0; &#125; &#125;&#125;int Calc()&#123; scanf(&quot;%s&quot;,s); int len=strlen(s),pre=0,ans=0; for(int i=0;i&lt;len;i++) &#123; pre=son[pre][s[i]-&apos;a&apos;]; for(int j=pre;j;j=fail[j]) ans+=end[j],end[j]=0; &#125; return ans;&#125;int main()&#123; scanf(&quot;%d&quot;,&amp;T); while(T--) &#123; init(tot=0); for(scanf(&quot;%d&quot;,&amp;n);n;n--) Add(); Build(); printf(&quot;%d\n&quot;,Calc()); &#125;&#125; 数学数论快速幂1234567int power(int a,int b,int P)&#123; int re=1; for(;b;b&gt;&gt;=1,a=(long long)a*a%P) if(b&amp;1) re=(long long)re*a%P; return re;&#125; exgcd12345678910111213141516171819#include &lt;cstdio&gt;using namespace std;int a,b,c,d,x,y;void exgcd(int a,int b,int &amp;d,int &amp;x,int &amp;y)&#123; if(!b) d=a,x=1,y=0; else exgcd(b,a%b,d,y,x),y-=a/b*x;&#125;int main()&#123; scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c); exgcd(a,b,d,x,y); if(!(c%d)) &#123; x*=c/d;y*=c/d;a/=d;b/=d; for(int k=-2;k&lt;=2;k++) printf(&quot;%d %d\n&quot;,x+k*b,y-k*a); &#125;&#125; BM123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103#include&lt;bits/stdc++.h&gt;using namespace std;#define rep(i,a,n) for (int i=a;i&lt;n;i++)#define per(i,a,n) for (int i=n-1;i&gt;=a;i--)#define pb push_back#define mp make_pair#define all(x) (x).begin(),(x).end()#define fi first#define se second#define SZ(x) ((int)(x).size())typedef vector&lt;int&gt; VI;typedef long long ll;typedef pair&lt;int,int&gt; PII;const ll mod=1000000007;ll powmod(ll a,ll b) &#123;ll res=1;a%=mod; assert(b&gt;=0); for(;b;b&gt;&gt;=1)&#123;if(b&amp;1)res=res*a%mod;a=a*a%mod;&#125;return res;&#125;ll _,n;namespace linear_seq&#123; const int N=10010; ll res[N],base[N],_c[N],_md[N]; vector&lt;ll&gt; Md; void mul(ll *a,ll *b,int k) &#123; rep(i,0,k+k) _c[i]=0; rep(i,0,k) if (a[i]) rep(j,0,k) _c[i+j]=(_c[i+j]+a[i]*b[j])%mod; for (int i=k+k-1;i&gt;=k;i--) if (_c[i]) rep(j,0,SZ(Md)) _c[i-k+Md[j]]=(_c[i-k+Md[j]]-_c[i]*_md[Md[j]])%mod; rep(i,0,k) a[i]=_c[i]; &#125; int solve(ll n,VI a,VI b) &#123; ll ans=0,pnt=0; int k=SZ(a); assert(SZ(a)==SZ(b)); rep(i,0,k) _md[k-1-i]=-a[i];_md[k]=1; Md.clear(); rep(i,0,k) if (_md[i]!=0) Md.push_back(i); rep(i,0,k) res[i]=base[i]=0; res[0]=1; while ((1ll&lt;&lt;pnt)&lt;=n) pnt++; for (int p=pnt;p&gt;=0;p--) &#123; mul(res,res,k); if ((n&gt;&gt;p)&amp;1) &#123; for (int i=k-1;i&gt;=0;i--) res[i+1]=res[i];res[0]=0; rep(j,0,SZ(Md)) res[Md[j]]=(res[Md[j]]-res[k]*_md[Md[j]])%mod; &#125; &#125; rep(i,0,k) ans=(ans+res[i]*b[i])%mod; if (ans&lt;0) ans+=mod; return ans; &#125; VI BM(VI s) &#123; VI C(1,1),B(1,1); int L=0,m=1,b=1; rep(n,0,SZ(s)) &#123; ll d=0; rep(i,0,L+1) d=(d+(ll)C[i]*s[n-i])%mod; if (d==0) ++m; else if (2*L&lt;=n) &#123; VI T=C; ll c=mod-d*powmod(b,mod-2)%mod; while (SZ(C)&lt;SZ(B)+m) C.pb(0); rep(i,0,SZ(B)) C[i+m]=(C[i+m]+c*B[i])%mod; L=n+1-L; B=T; b=d; m=1; &#125; else &#123; ll c=mod-d*powmod(b,mod-2)%mod; while (SZ(C)&lt;SZ(B)+m) C.pb(0); rep(i,0,SZ(B)) C[i+m]=(C[i+m]+c*B[i])%mod; ++m; &#125; &#125; return C; &#125; int gao(VI a,ll n)&#123; VI c=BM(a); c.erase(c.begin()); rep(i,0,SZ(c)) c[i]=(mod-c[i])%mod; return solve(n,c,VI(a.begin(),a.begin()+SZ(c))); &#125;&#125;;int main()&#123; int t; scanf(&quot;%d&quot;,&amp;t); while(t--) &#123; scanf(&quot;%lld&quot;,&amp;n); vector&lt;int&gt;v; v.push_back(1); //至少8项，越多越好。 v.push_back(5); v.push_back(15); v.push_back(35); v.push_back(70); v.push_back(126); v.push_back(210); v.push_back(330); v.push_back(495); v.push_back(715); printf(&quot;%lld\n&quot;,linear_seq::gao(v,n-1)%mod); &#125;&#125; 组合数学计算数学凸包123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;const int N=1e5+5;const double eps=1e-6;int n,top;double len,S;struct Point &#123; double x,y; &#125; a[N],b[N];double dis(Point x,Point y)&#123; return sqrt((x.x-y.x)*(x.x-y.x)+(x.y-y.y)*(x.y-y.y));&#125;double Cross(Point x,Point y,Point z)&#123; return (x.x-z.x)*(y.y-z.y)-(x.y-z.y)*(y.x-z.x);&#125;double Cross(Point x,Point y)&#123; return x.x*y.y-x.y*y.x;&#125;bool cmp(const Point &amp;x,const Point &amp;y)&#123; double t=Cross(x,y,a[1]);return abs(t)&gt;eps?t&gt;0:dis(a[1],x)&lt;dis(a[1],y);&#125;inline void Graham()&#123; int t=1; for(int i=2;i&lt;=n;i++) if(a[i].x&lt;a[t].x||(a[i].x==a[t].x&amp;&amp;a[i].y&lt;a[t].y)) t=i; if(t!=1) std::swap(a[t],a[1]); std::sort(a+2,a+n+1,cmp); for(int i=1;i&lt;=n;i++) &#123; while(top&gt;1&amp;&amp;Cross(a[i],b[top],b[top-1])&gt;=0) top--; b[++top]=a[i]; &#125; b[top+1]=b[1];&#125;int main()&#123; scanf(&quot;%d&quot;,&amp;n); for(int i=1;i&lt;=n;i++) scanf(&quot;%lf%lf&quot;,&amp;a[i].x,&amp;a[i].y); Graham();//求凸包的点 for(int i=1;i&lt;=top;i++) len+=dis(b[i],b[i+1]); printf(&quot;L: %.8lf\n&quot;,len);//求凸包的长度 for(int i=1;i&lt;=top;i++) S+=Cross(b[i],b[i+1]); printf(&quot;S: %.8lf\n&quot;,S/2);//求凸包的面积 &#125; 点旋转123假设对图片上任意点(x,y)，绕一个坐标点(rx0,ry0)逆时针旋转a角度后的新的坐标设为(x0, y0)，有公式： x0= (x - rx0)*cos(a) - (y - ry0)*sin(a) + rx0 ; y0= (x - rx0)*sin(a) + (y - ry0)*cos(a) + ry0 ;]]></content>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kunagbin专题一 kmp]]></title>
    <url>%2F2019%2F01%2F26%2Fkunagbin%E4%B8%93%E9%A2%98%E4%B8%80-kmp%2F</url>
    <content type="text"><![CDATA[A B C D E F G H I J K L M N O P √ √ √ √ √ √ √ √ √ √ A - Oulipo简单kmp板子题，求母串里有几个子串 123456789101112131415161718192021222324252627282930313233343536373839#include&lt;cstring&gt;#include&lt;cstdio&gt;int n,m,next[1000001];long long int sum;char a[1000001],b[1000001];void Getnext()&#123; next[0]=-1; for(int i=1,j=0;i&lt;m;i++,j++) &#123; while(j!=-1&amp;&amp;b[i]!=b[j]) j=next[j];//j取-1只是为了判断边界，就如果j为0的话会一直循环下去 next[i+1]=j+1;//匹配到第i+1个时，从第i个开始匹配，例如abcabcd 与 abcabce第3个匹配不上，但是前两个匹配得上 &#125;&#125;void KMP()&#123; for(int i=0,j=0;i&lt;n;i++,j++) &#123; while(j!=-1&amp;&amp;a[i]!=b[j]) j=next[j]; if(j==m-1) sum++; &#125;&#125;int main()&#123; int t; scanf(&quot;%d&quot;,&amp;t); while(t--) &#123; sum=0; memset(next,0,sizeof(next)); scanf(&quot;%s%s&quot;,b,a); //a-&gt;long b-&gt;short n=strlen(a);m=strlen(b); Getnext(); KMP(); printf(&quot;%lld\n&quot;,sum); &#125; return 0;&#125; B - Number Sequence子字符串在母串的位置，板子题 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;cstring&gt;#include&lt;cstdio&gt;int n,m,next[1000001];long long int sum;int a[1000001],b[1000001];void Getnext()&#123; next[0]=-1; for(int i=1,j=0;i&lt;m;i++,j++) &#123; while(j!=-1&amp;&amp;b[i]!=b[j]) j=next[j];//j取-1只是为了判断边界，就如果j为0的话会一直循环下去 next[i+1]=j+1;//匹配到第i+1个时，从第i个开始匹配，例如abcabcd 与 abcabce第3个匹配不上，但是前两个匹配得上 &#125;&#125;void KMP()&#123; for(int i=0,j=0;i&lt;n;i++,j++) &#123; while(j!=-1&amp;&amp;a[i]!=b[j]) j=next[j]; if(j==m-1) &#123; sum=i-j+1; return; &#125; &#125;&#125;int main()&#123; int t; scanf(&quot;%d&quot;,&amp;t); while(t--) &#123; sum=0; int i; memset(next,0,sizeof(next)); scanf(&quot;%d%d&quot;,&amp;n,&amp;m); for(i=0;i&lt;n;i++) &#123; scanf(&quot;%d&quot;,&amp;a[i]); &#125; for(i=0;i&lt;m;i++) &#123; scanf(&quot;%d&quot;,&amp;b[i]); &#125; Getnext(); KMP(); if(sum==0) sum=-1; printf(&quot;%lld\n&quot;,sum); &#125; return 0;&#125; C - Period当前位循环节的个数，也是板子题，next数组的应用 12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;cstring&gt;#include&lt;cstdio&gt;int n,m,next[1000001];long long int sum;char b[1000001];void Getnext()&#123; next[0]=-1; for(int i=1,j=0;i&lt;m;i++,j++) &#123; while(j!=-1&amp;&amp;b[i]!=b[j]) j=next[j]; next[i+1]=j+1; &#125;&#125;int main()&#123; int t,i; for(t=1;;t++) &#123; memset(next,0,sizeof(next)); scanf(&quot;%d&quot;,&amp;m); if(m==0) break; scanf(&quot;%s&quot;,b); printf(&quot;Test case #%d\n&quot;,t); Getnext(); for(i=1;i&lt;=m;i++) &#123; if(next[i]&gt;0) &#123; if(i%(i-next[i])==0) &#123; printf(&quot;%d %d\n&quot;,i,i/(i-next[i])); &#125; &#125; &#125; printf(&quot;\n&quot;); &#125; return 0;&#125; D - Power Strings和c差不多，仍然是求循环节的个数。 123456789101112131415161718192021222324252627282930313233343536#include&lt;cstring&gt;#include&lt;cstdio&gt;int n,m,next[1000001];long long int sum;char b[1000001];void Getnext()&#123; next[0]=-1; for(int i=1,j=0;i&lt;m;i++,j++) &#123; while(j!=-1&amp;&amp;b[i]!=b[j]) j=next[j]; next[i+1]=j+1; &#125;&#125;int main()&#123; while(1) &#123; int i; memset(next,0,sizeof(next)); scanf(&quot;%s&quot;,b); m=strlen(b); if(b[0]==&apos;.&apos;&amp;&amp;m==1) break; Getnext(); if(m%(m-next[m])==0) &#123; printf(&quot;%d\n&quot;,m/(m-next[m])); &#125; else &#123; printf(&quot;1\n&quot;); &#125; &#125; return 0;&#125; E - Count the string子串在母串的个数和，还是偏板子的思维题。 1234567891011121314151617181920212223242526272829303132333435#include&lt;cstring&gt;#include&lt;cstdio&gt;int n,m,next[1000001];int men[1000001];long long int sum;char b[1000001];void Getnext()&#123; next[0]=-1; for(int i=1,j=0;i&lt;m;i++,j++) &#123; while(j!=-1&amp;&amp;b[i]!=b[j]) j=next[j]; next[i+1]=j+1; &#125;&#125;int main()&#123; int t,i; scanf(&quot;%d&quot;,&amp;t); while(t--) &#123; sum=0; scanf(&quot;%d&quot;,&amp;m); scanf(&quot;%s&quot;,b); Getnext(); for(i=1;i&lt;=m;i++) &#123; //printf(&quot;%d &quot;,next[i]); if(next[i]&gt;0) sum++; &#125; printf(&quot;%lld\n&quot;,(sum+m)%10007); &#125; return 0;&#125; F - Cyclic Nacklace在后面添加几个可以让当前字符串构成循环，注意最后一位。next数组的利用。 12345678910111213141516171819202122232425262728293031323334353637#include&lt;stdio.h&gt;#include&lt;string.h&gt;int next[100005],m;char b[100005];void getnext()&#123; next[0]=-1; for(int i=1,j=0;i&lt;m;i++,j++) &#123; while(b[i]!=b[j]&amp;&amp;j!=-1) j=next[j]; next[i+1]=j+1; &#125; return;&#125;int main()&#123; int t; scanf(&quot;%d&quot;,&amp;t); while(t--) &#123; memset(next,0,sizeof(next)); scanf(&quot;%s&quot;,b); m=strlen(b); getnext(); if(m%(m-next[m])==0&amp;&amp;next[m]!=0) &#123; printf(&quot;0\n&quot;); &#125; else &#123; int men=m-next[m]; int j=next[m]%men; printf(&quot;%d\n&quot;,men-j); &#125; &#125; return 0; &#125; G - Simpsons’ Hidden Talents最长前后缀,kmp一次就行。 12345678910111213141516171819202122232425262728293031323334353637383940414243#include&lt;stdio.h&gt;#include&lt;string.h&gt;int next[1000005],m,n,sum;char b[1000005],a[1000005];void getnext()&#123; next[0]=-1; for(int i=1,j=0;i&lt;m;i++,j++) &#123; while(b[i]!=b[j]&amp;&amp;j!=-1) j=next[j]; next[i+1]=j+1; &#125; return;&#125;void KMP()&#123; for(int i=0,j=0;i&lt;n;i++,j++) &#123; while(j!=-1&amp;&amp;a[i]!=b[j]) j=next[j]; sum=j; &#125;&#125;int main()&#123; while(scanf(&quot;%s%s&quot;,b,a)!=EOF) &#123; sum=0; memset(next,0,sizeof(next)); n=strlen(a); m=strlen(b); getnext(); KMP(); for(int i=0;i&lt;=sum;i++) printf(&quot;%c&quot;,b[i]); if(sum&gt;-1) printf(&quot; %d\n&quot;,sum+1); else &#123; printf(&quot;%d\n&quot;,sum+1); &#125; &#125; return 0; &#125; H - Milking Grid求最小覆盖问题，就横竖两次遍历的next数组的应用，然后求他们循环节的最大公倍数，注意，不能超过m,n。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;algorithm&gt;using namespace std;char a[10005][100];long long int next[10005];int main()&#123; long long int qum=1,sum=1; long long int i,j,m,n; scanf(&quot;%lld%lld&quot;,&amp;n,&amp;m); for(i=0;i&lt;n;i++) &#123; for(j=0;j&lt;m;j++) &#123; scanf(&quot; %c&quot;,&amp;a[i][j]); &#125; &#125; for(i=0;i&lt;n;i++) &#123; memset(next,0,sizeof(next)); next[0]=-1; for(int ii=1,j=0;ii&lt;m;ii++,j++) &#123; while(a[i][ii]!=a[i][j]&amp;&amp;j!=-1) j=next[j]; next[ii+1]=j+1; &#125; sum=((sum/__gcd(sum,(m-next[m])))*((m-next[m]))); if(sum&gt;m) sum=m; &#125; for(i=0;i&lt;m;i++) &#123; memset(next,0,sizeof(next)); next[0]=-1; for(int ii=1,j=0;ii&lt;n;ii++,j++) &#123; while(a[ii][i]!=a[j][i]&amp;&amp;j!=-1) j=next[j]; next[ii+1]=j+1; &#125; qum=((qum/__gcd(qum,(n-next[n])))*(n-next[n])); if(qum&gt;n) qum=n; &#125; printf(&quot;%lld\n&quot;,sum*qum); return 0; &#125; I - Theme Section使输入的字符串满足EAEBE格式的最长E串，next数组的利用，我们可以认为最长为n=next[m]（该字符串的前后缀长度）E（AEB）E，然后从头到尾找是否还有子串满足前后缀长度为n,即找满足EAE格式。如果找不到n–，一直到找到或者n为0 123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;stdio.h&gt;#include&lt;string.h&gt;int next[1000005];char a[1000005];int m;void Getnext()&#123; int i,j; next[0]=-1; for(int i=1,j=0;i&lt;m;i++,j++) &#123; while(j!=-1&amp;&amp;a[i]!=a[j]) j=next[j]; next[i+1]=j+1; &#125; return;&#125;int main()&#123; int i,j,n,t; scanf(&quot;%d&quot;,&amp;t); while(t--) &#123; scanf(&quot;%s&quot;,a); m=strlen(a); Getnext(); n=next[m]; for(i=n;i&gt;=0;i--) &#123; for(j=1;j&lt;=m;j++) &#123; if(next[j]==i) break; &#125; if(j&lt;m) &#123; break; &#125; &#125; printf(&quot;%d\n&quot;,i); &#125; return 0;&#125; M - Substring Frequency板子题，子串在母串出现了几次。 123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;stdio.h&gt;#include&lt;string.h&gt;int next[1000005];char a[1000005];int m;void Getnext()&#123; int i,j; next[0]=-1; for(int i=1,j=0;i&lt;m;i++,j++) &#123; while(j!=-1&amp;&amp;a[i]!=a[j]) j=next[j]; next[i+1]=j+1; &#125; return;&#125;int main()&#123; int i,j,n,t; scanf(&quot;%d&quot;,&amp;t); while(t--) &#123; scanf(&quot;%s&quot;,a); m=strlen(a); Getnext(); n=next[m]; for(i=n;i&gt;=0;i--) &#123; for(j=1;j&lt;=m;j++) &#123; if(next[j]==i) break; &#125; if(j&lt;m) &#123; break; &#125; &#125; printf(&quot;%d\n&quot;,i); &#125; return 0;&#125;]]></content>
      <categories>
        <category>VJ</category>
      </categories>
      <tags>
        <tag>kmp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codeforces 534D]]></title>
    <url>%2F2019%2F01%2F25%2Fcodeforces-534D%2F</url>
    <content type="text"><![CDATA[D. Game with modulo 分块二分，首先0到1询问，如果返回为x则证明a为1，然后询问（1，2）（2，4）（4，8）……（1e9,2e9)，如果返回为x则证明a在该区间，对区间进行二分查询。 最开始想的是直接1到2e9进行二分，发现会超过60次。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;stdio.h&gt;long long int a[50],l,r,m;char f[100];int main()&#123; int i,j,n; a[0]=0; a[1]=1; for(i=2;i&lt;=32;i++) &#123; a[i]=a[i-1]*2; &#125; while(scanf(&quot; %s&quot;,f)!=EOF) &#123; if(f[0]!=&apos;s&apos;) break; char c; for(i=0;i&lt;=30;i++) &#123; printf(&quot;? %lld %lld\n&quot;,a[i],a[i+1]); fflush(stdout); scanf(&quot; %c&quot;,&amp;c); if(c==&apos;x&apos;) break; &#125; if(a[i]==0) &#123; printf(&quot;! 1\n&quot;); fflush(stdout); &#125; else &#123; l=a[i]+1,r=a[i+1]; while(l&lt;r) &#123; m=(l+r)/2; printf(&quot;? %lld %lld\n&quot;,m,l-1); fflush(stdout); scanf(&quot; %c&quot;,&amp;c); if(c==&apos;x&apos;) l=m+1; else r=m; &#125; printf(&quot;! %lld\n&quot;,l); fflush(stdout); &#125; &#125; return 0; &#125;]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>codeforces</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F01%2F24%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
