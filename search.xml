<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[kunagbin专题一 kmp]]></title>
    <url>%2F2019%2F01%2F26%2Fkunagbin%E4%B8%93%E9%A2%98%E4%B8%80-kmp%2F</url>
    <content type="text"><![CDATA[A - Oulipo简单kmp板子题，求母串里有几个子串123456789101112131415161718192021222324252627282930313233343536373839#include&lt;cstring&gt;#include&lt;cstdio&gt;int n,m,next[1000001];long long int sum;char a[1000001],b[1000001];void Getnext()&#123; next[0]=-1; for(int i=1,j=0;i&lt;m;i++,j++) &#123; while(j!=-1&amp;&amp;b[i]!=b[j]) j=next[j];//j取-1只是为了判断边界，就如果j为0的话会一直循环下去 next[i+1]=j+1;//匹配到第i+1个时，从第i个开始匹配，例如abcabcd 与 abcabce第3个匹配不上，但是前两个匹配得上 &#125;&#125;void KMP()&#123; for(int i=0,j=0;i&lt;n;i++,j++) &#123; while(j!=-1&amp;&amp;a[i]!=b[j]) j=next[j]; if(j==m-1) sum++; &#125;&#125;int main()&#123; int t; scanf(&quot;%d&quot;,&amp;t); while(t--) &#123; sum=0; memset(next,0,sizeof(next)); scanf(&quot;%s%s&quot;,b,a); //a-&gt;long b-&gt;short n=strlen(a);m=strlen(b); Getnext(); KMP(); printf(&quot;%lld\n&quot;,sum); &#125; return 0;&#125; B - Number Sequence子字符串在母串的位置，板子题 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;cstring&gt;#include&lt;cstdio&gt;int n,m,next[1000001];long long int sum;int a[1000001],b[1000001];void Getnext()&#123; next[0]=-1; for(int i=1,j=0;i&lt;m;i++,j++) &#123; while(j!=-1&amp;&amp;b[i]!=b[j]) j=next[j];//j取-1只是为了判断边界，就如果j为0的话会一直循环下去 next[i+1]=j+1;//匹配到第i+1个时，从第i个开始匹配，例如abcabcd 与 abcabce第3个匹配不上，但是前两个匹配得上 &#125;&#125;void KMP()&#123; for(int i=0,j=0;i&lt;n;i++,j++) &#123; while(j!=-1&amp;&amp;a[i]!=b[j]) j=next[j]; if(j==m-1) &#123; sum=i-j+1; return; &#125; &#125;&#125;int main()&#123; int t; scanf(&quot;%d&quot;,&amp;t); while(t--) &#123; sum=0; int i; memset(next,0,sizeof(next)); scanf(&quot;%d%d&quot;,&amp;n,&amp;m); for(i=0;i&lt;n;i++) &#123; scanf(&quot;%d&quot;,&amp;a[i]); &#125; for(i=0;i&lt;m;i++) &#123; scanf(&quot;%d&quot;,&amp;b[i]); &#125; Getnext(); KMP(); if(sum==0) sum=-1; printf(&quot;%lld\n&quot;,sum); &#125; return 0;&#125; C - Period当前位循环节的个数，也是板子题，next数组的应用 12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;cstring&gt;#include&lt;cstdio&gt;int n,m,next[1000001];long long int sum;char b[1000001];void Getnext()&#123; next[0]=-1; for(int i=1,j=0;i&lt;m;i++,j++) &#123; while(j!=-1&amp;&amp;b[i]!=b[j]) j=next[j]; next[i+1]=j+1; &#125;&#125;int main()&#123; int t,i; for(t=1;;t++) &#123; memset(next,0,sizeof(next)); scanf(&quot;%d&quot;,&amp;m); if(m==0) break; scanf(&quot;%s&quot;,b); printf(&quot;Test case #%d\n&quot;,t); Getnext(); for(i=1;i&lt;=m;i++) &#123; if(next[i]&gt;0) &#123; if(i%(i-next[i])==0) &#123; printf(&quot;%d %d\n&quot;,i,i/(i-next[i])); &#125; &#125; &#125; printf(&quot;\n&quot;); &#125; return 0;&#125; D - Power Strings和c差不多，仍然是求循环节的个数。 123456789101112131415161718192021222324252627282930313233343536#include&lt;cstring&gt;#include&lt;cstdio&gt;int n,m,next[1000001];long long int sum;char b[1000001];void Getnext()&#123; next[0]=-1; for(int i=1,j=0;i&lt;m;i++,j++) &#123; while(j!=-1&amp;&amp;b[i]!=b[j]) j=next[j]; next[i+1]=j+1; &#125;&#125;int main()&#123; while(1) &#123; int i; memset(next,0,sizeof(next)); scanf(&quot;%s&quot;,b); m=strlen(b); if(b[0]==&apos;.&apos;&amp;&amp;m==1) break; Getnext(); if(m%(m-next[m])==0) &#123; printf(&quot;%d\n&quot;,m/(m-next[m])); &#125; else &#123; printf(&quot;1\n&quot;); &#125; &#125; return 0;&#125; E - Count the string子串在母串的个数和，还是偏板子的思维题。 1234567891011121314151617181920212223242526272829303132333435#include&lt;cstring&gt;#include&lt;cstdio&gt;int n,m,next[1000001];int men[1000001];long long int sum;char b[1000001];void Getnext()&#123; next[0]=-1; for(int i=1,j=0;i&lt;m;i++,j++) &#123; while(j!=-1&amp;&amp;b[i]!=b[j]) j=next[j]; next[i+1]=j+1; &#125;&#125;int main()&#123; int t,i; scanf(&quot;%d&quot;,&amp;t); while(t--) &#123; sum=0; scanf(&quot;%d&quot;,&amp;m); scanf(&quot;%s&quot;,b); Getnext(); for(i=1;i&lt;=m;i++) &#123; //printf(&quot;%d &quot;,next[i]); if(next[i]&gt;0) sum++; &#125; printf(&quot;%lld\n&quot;,(sum+m)%10007); &#125; return 0;&#125; F - Cyclic Nacklace在后面添加几个可以让当前字符串构成循环，注意最后一位。next数组的利用。 12345678910111213141516171819202122232425262728293031323334353637#include&lt;stdio.h&gt;#include&lt;string.h&gt;int next[100005],m;char b[100005];void getnext()&#123; next[0]=-1; for(int i=1,j=0;i&lt;m;i++,j++) &#123; while(b[i]!=b[j]&amp;&amp;j!=-1) j=next[j]; next[i+1]=j+1; &#125; return;&#125;int main()&#123; int t; scanf(&quot;%d&quot;,&amp;t); while(t--) &#123; memset(next,0,sizeof(next)); scanf(&quot;%s&quot;,b); m=strlen(b); getnext(); if(m%(m-next[m])==0&amp;&amp;next[m]!=0) &#123; printf(&quot;0\n&quot;); &#125; else &#123; int men=m-next[m]; int j=next[m]%men; printf(&quot;%d\n&quot;,men-j); &#125; &#125; return 0; &#125; G - Simpsons’ Hidden Talents最长前后缀,kmp一次就行。 12345678910111213141516171819202122232425262728293031323334353637383940414243#include&lt;stdio.h&gt;#include&lt;string.h&gt;int next[1000005],m,n,sum;char b[1000005],a[1000005];void getnext()&#123; next[0]=-1; for(int i=1,j=0;i&lt;m;i++,j++) &#123; while(b[i]!=b[j]&amp;&amp;j!=-1) j=next[j]; next[i+1]=j+1; &#125; return;&#125;void KMP()&#123; for(int i=0,j=0;i&lt;n;i++,j++) &#123; while(j!=-1&amp;&amp;a[i]!=b[j]) j=next[j]; sum=j; &#125;&#125;int main()&#123; while(scanf(&quot;%s%s&quot;,b,a)!=EOF) &#123; sum=0; memset(next,0,sizeof(next)); n=strlen(a); m=strlen(b); getnext(); KMP(); for(int i=0;i&lt;=sum;i++) printf(&quot;%c&quot;,b[i]); if(sum&gt;-1) printf(&quot; %d\n&quot;,sum+1); else &#123; printf(&quot;%d\n&quot;,sum+1); &#125; &#125; return 0; &#125;]]></content>
      <tags>
        <tag>kmp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codeforces 534D]]></title>
    <url>%2F2019%2F01%2F25%2Fcodeforces-534D%2F</url>
    <content type="text"><![CDATA[D. Game with modulo 分块二分，首先0到1询问，如果返回为x则证明a为1，然后询问（1，2）（2，4）（4，8）……（1e9,2e9)，如果返回为x则证明a在该区间，对区间进行二分查询。 最开始想的是直接1到2e9进行二分，发现会超过60次。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;stdio.h&gt;long long int a[50],l,r,m;char f[100];int main()&#123; int i,j,n; a[0]=0; a[1]=1; for(i=2;i&lt;=32;i++) &#123; a[i]=a[i-1]*2; &#125; while(scanf(&quot; %s&quot;,f)!=EOF) &#123; if(f[0]!=&apos;s&apos;) break; char c; for(i=0;i&lt;=30;i++) &#123; printf(&quot;? %lld %lld\n&quot;,a[i],a[i+1]); fflush(stdout); scanf(&quot; %c&quot;,&amp;c); if(c==&apos;x&apos;) break; &#125; if(a[i]==0) &#123; printf(&quot;! 1\n&quot;); fflush(stdout); &#125; else &#123; l=a[i]+1,r=a[i+1]; while(l&lt;r) &#123; m=(l+r)/2; printf(&quot;? %lld %lld\n&quot;,m,l-1); fflush(stdout); scanf(&quot; %c&quot;,&amp;c); if(c==&apos;x&apos;) l=m+1; else r=m; &#125; printf(&quot;! %lld\n&quot;,l); fflush(stdout); &#125; &#125; return 0; &#125;]]></content>
      <tags>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F01%2F24%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
